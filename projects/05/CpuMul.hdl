// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
	Mux16(a=instruction,b=ALUout,sel=instruction[15],out=inA);
	
	Mux(a=true,b=instruction[5],sel=instruction[15],out=loadA);
	ARegister(in=inA,load=loadA,out=Aout); //instruction[5] is the first destenation bit
	
	And(a=instruction[4],b=instruction[15],out=loadD);
	DRegister(in=ALUout,load=loadD,out=Dout); //instruction[4] is the second destenation bit
	
	Mux16(a=Aout,b=inM,sel=instruction[12],out=Mux1out);
	
	//ALU(x=Dout,y=Mux1out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,zr=zr,ng=ng);
	ExtendAlu(x=Dout,y=Mux1out,instruction=instruction[6..14],out=ALUout,zr=zr,ng=ng);
	And16(a=ALUout,b=ALUout,out=outM); //channel ALUout to the M output
	
	And(a=instruction[3],b=instruction[15],out=writeM); // set writeM to the last destenation bit
	And16(a=Aout,b=Aout,out[0..14]=addressM);
	
	//pc logics:
	Not(in=zr,out=Nzr);
	Not(in=ng,out=Nng);
	And(a=instruction[2],b=ng,out=A1);
	And(a=instruction[2],b=Nzr,out=A2);
	And(a=instruction[1],b=Nng,out=A3);
	And(a=instruction[1],b=zr,out=A4);
	And(a=instruction[0],b=Nng,out=A5);
	And(a=instruction[0],b=Nzr,out=A6);
	And(a=A1,b=A3,out=O1);
	And(a=A1,b=A2,out=O5);
	Or(a=O5,b=A4,out=O2);
	And(a=A5,b=A6,out=O3);
	Or(a=O1,b=O2,out=O4);
	Or(a=O3,b=O4,out=O6);
	And(a=O6,b=instruction[15],out=PCload);
	
	Not(in=PCload,out=NPCload);
	PC(in=Aout,load=PCload,inc=NPCload,reset=reset,out[0..14]=pc);
}
