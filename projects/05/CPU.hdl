// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	Mux16(a=instruction,b=ALUout,sel=instruction[15],out=inA);
	
	Mux(a=true,b=instruction[5],sel=instruction[15],out=loadA);
	ARegister(in=inA,load=loadA,out=Aout); //instruction[11] is the first destenation bit
	
	And(a=instruction[4],b=instruction[15],out=loadD);
	DRegister(in=ALUout,load=loadD,out=Dout); //instruction[12] is the second destenation bit
	
	Mux16(a=Aout,b=inM,sel=instruction[12],out=Mux1out);
	
	ALU(x=Dout,y=Mux1out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,zr=zr,ng=ng);
	And16(a=ALUout,b=ALUout,out=outM); //channel ALUout to the M output
	
	And(a=instruction[3],b=instruction[15],out=writeM); // set writeM to the last destenation bit
	And16(a=Aout,b=Aout,out[0..14]=addressM);
	
	//pc logics:
	Not(in=zr,out=Nzr);
	Not(in=ng,out=Nng);
	And(a=instruction[2],b=ng,out=A1);
	And(a=instruction[2],b=Nzr,out=A2);
	And(a=instruction[1],b=Nng,out=A3);
	And(a=instruction[1],b=zr,out=A4);
	And(a=instruction[0],b=Nng,out=A5);
	And(a=instruction[0],b=Nzr,out=A6);
	And(a=A1,b=A3,out=O1);
	And(a=A1,b=A2,out=O5);
	Or(a=O5,b=A4,out=O2);
	And(a=A5,b=A6,out=O3);
	Or(a=O1,b=O2,out=O4);
	Or(a=O3,b=O4,out=O6);
	And(a=O6,b=instruction[15],out=PCload);
	
	Not(in=PCload,out=NPCload);
	PC(in=Aout,load=PCload,inc=NPCload,reset=reset,out[0..14]=pc);
	
	
}