// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        /** Initializes the Screen. */
		static int SCREEN;
		static int screen_size;
		static int color;
        function void init() {
			let SCREEN = 16384;
			let screen_size = 6428;
			let color = 1;
			return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
			var int i;
			let i = 0;
			while(i<screen_size){
				do Memory.poke(SCREEN + i, 0);
				let i = i + 1;
			}
			return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
			if(b){
				let color = 1;
			}
			else {
				let color = 0;
			}
			return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
			var int ithBit,curr ,i, pos, shiftedY, shiftedX, xRemains;
			let i = 0;
			let shiftedY = ^^^^^y;
			let shiftedX = ####x;
			
			let pos = SCREEN  + shiftedX + shiftedY;
			let curr = Memory.peek(pos);
			let xRemains = (x&15);
			let ithBit = 1;
			let i = 0;
			while(i<xRemains) {
				let ithBit = ^ithBit;
				let i = i + 1;
			}
			//if color == Ram[pos].color do nothing, else flip it
			if(((curr&ithBit) = 0) & (color = 1)) {
				let curr = curr + ithBit;
			}
			else{if((~((curr&ithBit) = 0)) & (color = 0)){
				let curr = curr - ithBit;
			}}
			do Memory.poke(pos, curr);
			return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
			
			// CASE I: y1 !
			var int y, x, i, diff;
			if((~(y1 = y2)) & (~(x1 = x2))){
				do Screen.drawDiagonalLine(x1, y1 , x2, y2);
			}
			else {
				if(y1 = y2) {
					if(x1 < x2){
						let i = 0;
						let x = x1;	
						let diff = x2 - x1;
					}
					else {
						let i = 0;
						let x = x2;	
						let diff = x1 - x2;
					}
					while (i < diff) {
						do Screen.drawPixel(x+i, y1);
						let i = i + 1;
					}
				}
				if(x1 = x2) {
					if(y1 < y2){
					let i = 0;
					let y = y1;	
					let diff = y2 - y1;
					}
					else {
					let i = 0;
					let y = y2;	
					let diff = y1 - y2;
					}
					while (i < diff) {
						do Screen.drawPixel(x1, y+i);
						let i = i + 1;
					}
				}

			}
			return;
			
        }
		
		function void drawDiagonalLine(int x1, int y1, int x2, int y2){
			var int x, y ,a ,b ,diff, dx, dy, aDiff, bDiff;

			let a = 0;
			let b = 0;
			let diff = 0;
			
			if(x1 < x2){
				let x = x1;
				let dx = x2 - x1;
				
				let y = y1;
				if(y1 < y2){
					let bDiff = 1;
					let dy = y2 - y1;
				}
				else{
					let bDiff = -1;
					let dy = y1 - y2;
				}
			}
			else{
				let x = x2;
				let dx = x1 - x2;
				
				let y = y2;
				if(y1 < y2){
					let bDiff = -1;
					let dy = y2 - y1;
				}
				else{
					let bDiff = 1;
					let dy = y1 - y2;
				}
			}
			
			

			while((a < dx) & (b < dy)){
				do Screen.drawPixel(x+a, y+b);
				if(diff < 0){
					let a = a + 1;
					let diff = diff + dy;
				}
				else {
					let b = b + bDiff;
					let diff = diff - dx;
				}
			}
			return;
		}

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
			var int diff, i, y;
			if(y1 < y2){
				let y = y1;
				let diff = y2 - y1;
			}
			else {
				let y = y2;
				let diff = y1 - y2;
			}
			let i = 0;
			while(i < diff){
				do Screen.drawLine(x1, y+i, x2, y+i);
				let i = i + 1;
			}
			return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
			var int dy, dist, a, b;
			let dy = -r;
			while(dy < r) {
				let a = x-Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));
				let b = x+Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));
				do Screen.drawLine(a, y + dy, b, y + dy);
				let dy = dy + 1;
			}
			return;
		}
}
