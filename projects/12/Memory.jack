// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    /** Initializes the class. */
	static Array ram;
	static Array freeList;
	static int freeListBase, endAddress;
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
		let ram = 0;
		let endAddress = 0;
		let freeListBase = 2049; 
		let freeList = freeListBase;
		let freeList[0] = endAddress;
		let freeList[-1] = 14335;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }


    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
		var int next, currSize;
		var Array currBlock, retBlock;
		let currBlock = freeList;
		let next = freeList[0];
		let currSize = freeList[-1];
		if((currSize - 1) > size){
			let retBlock = currBlock + currSize - size;
			let retBlock[-1] = size;
			let currBlock[-1] = currBlock[-1] - size - 1;
			return retBlock;
		}
		else{
			while(next > freeListBase){
				if((currSize - 1) > size){
					let retBlock = currBlock + currSize - size;
					let retBlock[-1] = size;
					let currBlock[-1] = currBlock[-1] - size - 1;
					return retBlock;
				}
				else{
					let currBlock = next;
					let next = currBlock[0];
					let size = currBlock[-1];
				}
			}
		}
		
		return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
		var Array segment, curr;
		var int next, size;
		let segment = o;
		let curr = freeList;
		let next = freeList[0];
		while(next > endAddress){
			let curr = next;
			let next = curr[0];
		}
		let curr[0] = segment;
		let segment[0] = endAddress;
		return;
    }    


	

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
		var int size, maxSize;
		var Array next,curr, max;
		let curr = freeList;
		let maxSize = 0;
		while(next>freeListBase){
			let size = curr[-1];
			let next = curr[0];
			if(size > maxSize){
				let max = curr;
				let maxSize = size;
			}
			let curr = next;
		}
		return max;
    }
}
